const topicDB = require("../models/topicSchema");module.exports = {    topicValidation: (req, res, next) => {        const {title, description, photos} = req.body        if (4 > title.length || title.length > 80) return res.send({            success: false,            message: "Title should be from 4 to 80 characters"        })        if (20 > description.length || description.length > 3500) return res.send({            success: false,            message: "Description should be from 20 to 3500 characters."        })        next()    },    topicInfoValidation: async (req, res, next) => {        const {id} = req.params        const topic = await topicDB.findOne({_id: id.toString()})        if (!topic) return res.send({success: false, message: 'Could not find the topic, please try again'})        next()    },    postValidation: async (req, res, next) => {        const {topicID, description, photos} = req.body        const topic = await topicDB.findOne({_id: topicID.toString()})        if (!topic) return res.send({success: false, message: 'Could not find this topic'})        if (20 > description.length || description.length > 3500) return res.send({            success: false,            message: "Description should be from 20 to 3500 characters."        })        photos.map(photo => {            if (!photo.includes('http')) {                return res.send({success: false, message: 'Photo or video link should include "http"'})            }        })        next()    },    validateFavoritesInfo: async (req, res, next) => {        const favorites = req.body        await Promise.all(favorites.map(async favorites => {           const favorite = await topicDB.findOne({_id: favorites})            if (!favorite) return res.send({success: false, message: 'Could not find the topic, please try again'})        }))        next()    }}