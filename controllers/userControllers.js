const userDB = require('../models/userSchema')const bcrypt = require('bcrypt');const {raw} = require("express");module.exports = {    registerUser: async (req, res) => {        const {username, email, photo, password} = req.body        const hatchedPassword = await bcrypt.hash(password, 10)        const user = await new userDB({            username,            email: email.toLowerCase(),            photo,            password: hatchedPassword        })        await user.save()        res.send({success: true})    },    userLogin: async (req, res) => {        const {email, password, stayLoggedIn} = req.body        const findUser = await userDB.findOne({email: email.toLowerCase()})        if (findUser) {            const comparePassword = await bcrypt.compare(password, findUser.password)            if (comparePassword) {                req.session.email = email.toLowerCase()                req.session.stayLoggedIn = stayLoggedIn                const user = {                    username: findUser.username,                    photo: findUser.photo,                }                return res.send({success: true, user})            }            res.send({success: false, message: 'Bad credentials'})        }    },    stayLoggedIn: async (req, res) => {        const {stayLoggedIn} = req.session        const {email} = req.session        if (stayLoggedIn) {            const findUser = await userDB.findOne({email})            if (findUser) {                const user = {                    username: findUser.username,                    photo: findUser.photo,                }                return res.send({success: true, user})            }        }        res.send({success: false})    },    logoutUser: async (req, res) => {        req.session.email = null        req.session.stayLoggedIn = null        res.send({success: true})    },    checkUserPassword: async (req, res) => {        const {password} = req.body        const {email} = req.session        const user = await userDB.findOne({email})        const compareResult = await bcrypt.compare(password, user.password)        if (!compareResult) return res.send({success: false, message: 'Wrong password, please try again.'})        res.send({success: true})    },    submitNewPassword: async (req, res) => {        const {password} = req.body        const {email} = req.session        const newPassword = await bcrypt.hash(password, 10)        await userDB.findOneAndUpdate(            {email},            {$set: {password: newPassword}}, {new: true},        )        return res.send({success: true})    },    changeUserPhoto: async (req, res) => {        const {photo} = req.body        const {email} = req.session        const user = await userDB.findOneAndUpdate({email}, {photo: photo}, {new: true})        res.send({success: true, user})    }}