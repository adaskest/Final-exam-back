const userDB = require('../models/userSchema')const topicDB = require('../models/topicSchema')module.exports = {    addTopic: async (req, res) => {        const {title, description, photos, uploadedTopic} = req.body        const {email} = req.session        const user = await userDB.findOne({email})        const topic = await new topicDB({            topicOwnerInfo: {                username: user.username,                registered: user.createdAccount,                photo: user.photo,                posts: user.posts.length            },            title,            description,            photos,            uploadedTopic,            posts: [],            lastPostInfo: {                lastPostTime: new Date().getTime(),                lastPostUser: user.username            }        })        await topic.save()        res.send({success: true})    },    getAllTopics: async (req, res) => {        const allTopics = await topicDB.find()        res.send({success: true, allTopics})    },    getUserTopics: async (req, res) => {        const {email} = req.session        const user = await userDB.findOne({email})        const topics = await topicDB.find({topicOwner: user.username})        res.send({success: true, topics, topicsCount: topics?.length})    },    getTopicInfo: async (req, res) => {        const {id} = req.params        const topic = await topicDB.findOne({_id: id.toString()})        res.send({success: true, topic})    },    addPost: async (req, res) => {        const {topicID, description, photos, uploadedPost} = req.body        const {email} = req.session        const user = await userDB.findOne({email})        const post = {            postOwnerInfo: {                username: user.username,                registered: user.createdAccount,                photo: user.photo,                posts: user.posts.length            },            description,            photos,            uploadedPost        }        const topic = await topicDB.findOneAndUpdate({_id: topicID.toString()}, {            lastPostInfo: {                lastPostTime: uploadedPost, lastPostUser: user.username            },            $push: {posts: post}        }, {new: true})        res.send({success: true, topic})    }}