const userDB = require('../models/userSchema')const topicDB = require('../models/topicSchema')module.exports = {    addTopic: async (req, res) => {        const {title, description, photos, uploadedTopic} = req.body        const {email} = req.session        const user = await userDB.findOne({email})        const topic = await new topicDB({            topicOwner: user.username,            topicOwnerInfo: {                registered: user.createdAccount,                photo: user.photo,                posts: user.posts.length            },            title,            description,            photos,            uploadedTopic,            posts: [],            lastPostInfo: {                lastPostTime: new Date().getTime(),                lastPostUser: user.username            }        })        const newTopic = await topic.save()        const postInfo = {            id: newTopic._id,            title: newTopic.title,            postsCount: topic.posts.length,            lastPostInfo: topic.lastPostInfo        }        await userDB.findOneAndUpdate({email}, {$push: {topics: {$each: [postInfo], $position: 0}}}, {new: true})        res.send({success: true})    },    getAllTopics: async (req, res) => {        const allTopicsData = await topicDB.find()        const allTopics = await Promise.all(allTopicsData.map(async topics => {            const topic = await topicDB.findOne({_id: topics._id.toString()})            const newTopic = {                id: topic._id,                title: topic.title,                postsCount: topic.posts.length,                lastPostInfo: topic.lastPostInfo            }            return newTopic        }))        res.send({success: true, allTopics})    },    getUserTopics: async (req, res) => {        const {email} = req.session        const user = await userDB.findOne({email})        const userTopics = await Promise.all(user.topics.map(async topics => {            const topic = await topicDB.findOne({_id: topics.id})            const newTopic = {                id: topic._id,                title: topic.title,                postsCount: topic.posts.length,                lastPostInfo: topic.lastPostInfo            }            return newTopic        }))        res.send({success: true, topics: userTopics, topicsCount: userTopics.length})    },    getUserPosts: async (req, res) => {        const {email} = req.session        const user = await userDB.findOne({email})        res.send({success: true, posts: user.posts, postsCount: user.posts.length})    },    getTopicInfo: async (req, res) => {        const {id} = req.params        const topicData = await topicDB.findOne({_id: id.toString()})        const user = await userDB.findOne({username: topicData.topicOwner})        const topic = await topicDB.findOneAndUpdate({_id: id.toString()}, {                $set: {"topicOwnerInfo.posts":user.posts.length}})        res.send({success: true, topic})    },    addPost: async (req, res) => {        const {topicID, description, photos, uploadedPost} = req.body        const {email} = req.session        const user = await userDB.findOne({email})        const post = {            postOwnerInfo: {                username: user.username,                registered: user.createdAccount,                photo: user.photo,                posts: user.posts.length            },            description,            photos,            uploadedPost        }        const topic = await topicDB.findOneAndUpdate({_id: topicID.toString()}, {            lastPostInfo: {                lastPostTime: uploadedPost, lastPostUser: user.username            },            $push: {posts: post},        }, {new: true})        const postInfo = {            id: topic._id,            title: topic.title,            postsCount: topic.posts.length,            lastPostInfo: topic.lastPostInfo        }        await userDB.findOneAndUpdate({email}, {$push: {posts: {$each: [postInfo], $position: 0}}}, {new: true})        res.send({success: true, topic})    },    sendFavoritesInfo: async (req, res) => {        const favorites = req.body        const favoriteTopics = await Promise.all(favorites.map(async favorites => {            const topic = await topicDB.findOne({_id: favorites})            const newTopic = {                id: topic._id,                title: topic.title,                postsCount: topic.posts.length,                lastPostInfo: topic.lastPostInfo            }            return newTopic        }))        res.send({success: true, favoriteTopics})    }}